@using Azimuth.Infrastructure
@model Azimuth.ViewModels.SettingsViewModel

@{
    ViewBag.Title = "Settings";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div>
    <div id="mainRow" class="row">
        <div id="playlists" class="stuck">
            <h3>Playlists</h3>
            <input class="form-control" id="searchPlaylistName" placeholder="Enter playlist name for search">
            <table class="table table-striped" id="playlistsTable">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>accessibilty</th>
                    </tr>
                </thead>
                <tbody id="playlists"></tbody>
            </table>
            <a class="btn btn-primary" id="createNewPlaylistBtn"></a>
        </div>
        <div id="separator" class="stuck">
            <div id="buttons">
                <img src="~/Images/media_prev.png" />
                <div class="spacer"></div>
                <img src="~/Images/media_play.png" />
                <div class="spacer"></div>
                <img src="~/Images/media_next.png" />
            </div>
            <div id="volume" class="dragdealer">
                <div class="handle"></div>
            </div>
        </div>
        <div id="tracks">
            <h3>Tracks</h3>
            <div class="tabbable">
                <ul class="nav nav-tabs">
                    <li class="active"><a href="#user-accounts" data-toggle="tab">Accounts</a></li>
                    @foreach (var sn in Model.ConnectedNetworks)
                    {
                        <li><a href="#@sn.Name" data-toggle="tab" data-provider="@sn.Name" data-reloginurl="@Url.Action("ConnectAccount", "Account", new { provider = @sn.Name, returnUrl = @Url.Action("Index", "Settings") })" class="providerBtn">@sn.Name</a></li>
                    }
                </ul>

                <div class="tab-content" style="margin-top: 10px">
                    <div class="tab-pane fade active in" id="user-accounts">
                        @foreach (var sn in Model.AvailableNetworks)
                        {
                            @Html.ActionLink(sn.Name, "ConnectAccount", "Account", new { provider = sn.Name, returnUrl = @Url.Action("Index", "Settings") }, new { @class = "btn btn-primary btn-large" })
                        }
                    </div>
                    @foreach (var sn in Model.ConnectedNetworks)
                    {
                        <div class="tab-pane fade" id="@sn.Name">
                            @Html.DisplayFor(x => sn.Name)
                            @if (AzimuthIdentity.Current.UserCredential.SocialNetworkName != sn.Name)
                            {
                                @Html.ActionLink("Disconnect", "Disconnect", new { provider = sn.Name }, new { @class = "btn btn-danger btn-large" })
                            }
                            @Html.Partial("_UserTracksPartial", new { provider = sn.Name })
                        </div>
                    }
                </div>
            </div>
            <div id="relogin" style="display: none">
                <p id="error"> Your time has expired, please login again. </p>
                @Html.ActionLink("OK", "ConnectAccount", "Account", null, new { @class = "btn btn-danger btn-large" })
            </div>
        </div>
    </div>
</div>
@section scripts
{
    <script type="text/javascript" src="https://ajax.aspnetcdn.com/ajax/jquery.templates/beta1/jquery.tmpl.js"></script>
    
    <script>
        new Dragdealer('volume', {
            vertical: true,
            horizontal: false,
            bottom: 4
        });
    </script>

    <script id="trackTemplate" type="text/x-jQuery-tmpl">
        <tr>
            <td>${artist}</td>
            <td>${title}</td>
            <td><input type="checkbox" checked="checked"></td>
            <td style="display: none" id="trackId">${id}</td>
        </tr>
    </script>
    <script id="playlistTemplate" type="text/x-jQuery-tmpl">
        <tr>
            <td>${Name}</td>
            <td>${Accessibilty}</td>
        </tr>
    </script>
    <script>
        var playlists_global = [];
        var stringForCreateBtn = "Create new playlist ";
        var showPlaylists = function(playlists) {
            $('#playlistsTable').find("tr:gt(0)").remove();
            if (typeof (playlists) == 'undefined') //Initial run to get playlists from db
                $.ajax({
                    url: '@Url.RouteUrl("DefaultApi", new {httproute = "", controller = "Playlists"})',
                    success: function(playlists) {
                        if (typeof playlists.Message === 'undefined') {
                            $("#relogin").hide();
                            playlists = playlists.Result;
                            var list = $('#playlistsTable');
                            for (var i = 0; i < playlists.length; i++) {
                                var playlist = playlists[i];
                                playlists_global.push(playlist);
                                list.append($("#playlistTemplate").tmpl(playlist));
                            }
                        } else {
                            $("#relogin").show();
                            var reloginContainer = $('#relogin');
                            reloginContainer.find('a').attr('href', reloginUrl);
                        }
                    }
                });
            else { //using to print playlists after using filter
                if (playlists.length != 0) {
                    var list = $('#playlistsTable');
                    for (var i = 0; i < playlists.length; i++) {
                        var playlist = playlists[i];
                        list.append($("#playlistTemplate").tmpl(playlist));
                    }
                } else {
                    var $createBtn = $('#createNewPlaylistBtn');
                    $createBtn.show();
                    $createBtn.text(stringForCreateBtn + $('#searchPlaylistName').val());
                }
            }
        };
        $(document).on('PlaylistAdded', function(playlist) {
            console.log(playlist);
            playlists_global.push({Name:playlist.Name, Accessibilty:playlist.Accessibilty});
            $('#searchPlaylistName').trigger('input');
        });

        $(document).ready(function() {
            showPlaylists();
            $('.providerBtn').click(function(e) {
                var provider = $(e.target).data('provider');
                var reloginUrl = $(e.target).data('reloginurl');
                console.log(provider);
                $("#tracks > tr").remove();
                $.ajax({
                    url: '/api/usertracks?provider=' + provider,
                    success: function(tracks) {
                        if (typeof tracks.Message === 'undefined') {
                            console.log(tracks);
                            $("#relogin").hide();
                            var list = $('#tracksTable');
                            for (var i = 0; i < tracks.length; i++) {
                                var track = tracks[i];
                                $("#trackTemplate").tmpl(track).appendTo(list);
                            }
                        } else {
                            $("#relogin").show();
                            var reloginContainer = $('#relogin');
                            reloginContainer.find('a').attr('href', reloginUrl);
                        }
                    }
                });
            });
        });
    </script>

    <script>
        $(document).ready(function() {
            $('#createNewPlaylistBtn').hide();
            $('#createNewPlaylistBtn').click(function() {
                var playlistName = $('#searchPlaylistName').val();
                $.ajax({
                    url: '/api/playlists?name=' + playlistName + '&accessibilty=Public',
                    type: 'POST',
                    dataType: 'json',
                    contentType: 'application/json',
                    async: false
                });
                $('#createNewPlaylistBtn').hide();
                $(document).trigger({ type: 'PlaylistAdded', Name: playlistName, Accessibilty: 1 });
            });
            $('#applyBtn').click(function(e) {
                var provider = $(e.target).data('provider');
                var tableControl = document.getElementById('tracksTable');
                var tracks = [];
                var accessibilty = ($('#setAccessibilty').val() === "Private" ? 0 : 1);
                console.log(accessibilty);
                $('input:checkbox:checked', tableControl).each(function() {
                    tracks.push($(this).closest('tr').find('#trackId').text());
                }).get();
                console.log(tracks);
                var playlistName = $('#inputPlaylistName').val();
                console.log(playlistName);

                $.ajax({
                    url: '/api/usertracks?provider=' + provider,
                    type: 'POST',
                    data: JSON.stringify({
                        "Name": playlistName,
                        "Accessibilty": accessibilty,
                        "TrackIds": tracks
                    }) + JSON.stringify({ "Provider": provider }),
                    dataType: 'json',
                    contentType: 'application/json',
                    async: false
                });
                $(document).trigger({ type: 'PlaylistAdded', Name: playlistName, Accessibilty: accessibilty });
            });
        });

        $(document).ready(function() {
            $('#checkall').click(function() {
                if ($(this).prop('checked'))
                    $('input:checkbox').prop('checked', true);
                else
                    $('input:checkbox').prop('checked', false);
            });
        });
        $(document).ready(function() {
            $('#searchPlaylistName').on('input', function (e) {
                $('#createNewPlaylistBtn').hide();
                var searchParam = $(this).val().toLocaleLowerCase();
                showPlaylists(playlists_global.filter(function(index) {
                    return (index.Name.toLocaleLowerCase().indexOf(searchParam) != -1);
                }));
            });
        });
    </script>
}