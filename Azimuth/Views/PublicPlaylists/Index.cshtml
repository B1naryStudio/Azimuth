@using Azimuth.Infrastructure

<div id="barplaylistArea">
    <div id="playlistsArea">
        <h2>Public Playlists</h2>
        <div id="playlists-plated"></div>
    </div>
    
    <div id="tracksArea">
        <h2 id="playlistName"></h2>
        <h3 id="listeners"></h3>
        <div id="playlist-info">
            <div id="tracks"></div>
            <div id="liseners"></div>
        </div>
    </div>
</div>
@section scripts
{
    <script type="text/javascript" src="../../Scripts/jquery-1.10.2.js"></script>
    <script type="text/javascript" src="https://ajax.aspnetcdn.com/ajax/jquery.templates/beta1/jquery.tmpl.js"></script>
    <script type="text/javascript" src="../../Scripts/settingsManager.js"></script>
    <script type="text/javascript" src="../../Scripts/audioManager.js"></script>
    <script id="playlistTemplate" type="text/x-jQuery-tmpl">
        <div class="playlist-plated" >
            <div class="playlist-plated-info">
                <span class="playlist-plated-info-name">${Name}</span>
                <span>${Duration}</span>
                <span>Created by ${Creator}</span>
                <span>${Genres}</span>
            </div>
        </div>
        <div id="playlistTracksTable" class="draggable-list" style="display: none"></div>
    </script>
    <script id="playlistTrackTemplate" type="text/x-jQuery-tmpl">
        <div class="tableRow draggable-item track">
            <div class="glyphicon glyphicon-play btn btn-default track-play-btn"></div>
            <div class="track-description">
                <div class="track-info">
                    <span class="nowrap">${Artist}</span>
                </div>
                <div class="track-title nowrap">${Name}</div>
            </div>
            <div class="track-duration nowrap">${Duration}</div>
            <div style="display: none" class="track-url">${Url}</div>
            <div style="display: none" class="trackId">${Id}</div>
        </div>
    </script>
    <script>
        var audioManager = new AudioManager();
        var playlists_global = null;
        var $playlistTemplate = $("#playlistTemplate");
        var $trackTemplate = $("#trackTemplate");
        var $tracks = $('#tracks');
        var $playlists = $('#playlists-plated');
        var $playlistsArea = $('#playlistsArea');
        var $tracksArea = $('#tracksArea');
        var $playlistName = $('#playlistName');
        var $listeners = $('#listeners');
        $(document).ready(function() {
            $('#playlistId').focus(function() {
                $(this).val('');
            });
            showPlaylists();
         
            
            $playlists.click(function(event) {
                $playlistsArea.hide();
                $tracksArea.show();
                var $playlist = $(event.target).closest('.playlist-plated');
                var playlistName = $playlist.find('.playlist-plated-info-name').text();
                var playlist = playlists_global.filter(function(index) {
                    return index.Name.valueOf() == playlistName;
                })[0];
                showTracks(playlist);
                $(document).trigger('newListenerAdded', [playlist]);
            });
            $(document).on('newListenerAdded', addCurrentUserAsListener);
        });

        function showPlaylists() {
            $playlists.empty();
            $.ajax({
                cache: false,
                type: "GET",
                url: "/api/playlists/public",
                dataType: "json",
                async: false,
                success: function(data) {
                    var playlists = data;
                    playlists_global = playlists;
                    for (var i = 0; i < playlists.length; i++) {
                        var playlist = playlists[i];
                        var mins = Math.floor(playlist.Duration / 60);
                        var secs = ('0' + (playlist.Duration % 60)).slice(-2);
                        playlist.Duration = mins + ':' + secs;
                        console.log(playlist.Creator);
                        playlist.Creator = playlist.Creator.Name;
                        $playlists.append($('#playlistTemplate').tmpl(playlist));
                    }
                }
            });
        }
        function addCurrentUserAsListener(event, playlist) {
            $.ajax({
                cache: false,
                type: "Post",
                url: "/api/listeners/" + playlist.Id,
                dataType: "json",
                async: false,
                success: function (data) {
                    showListeners(playlist.Id);
                    console.log("we're ok");
                },
                error: function () {
                    console.log('playlist');
                    console.log(playlist);
                }
        
            });
        }
        function showListeners(playlist) {
            $listeners.empty();
            $.ajax({
                cache: false,
                type: "GET",
                url: "/api/listeners/"+playlist.Id,
                dataType: "json",
                async: false,
                success: function (data) {
                    console.log(data);
                }
            });
        }

        function showTracks(playlist) {
            
            $playlistName.text(playlist.Name);
            console.log(playlist.Id);
            $.ajax({
                url: "/api/usertracks?playlistId=" + playlist.Id, // TODO replace with class playlistID
                type: 'GET',
                async: false,
                success: function(tracksData) {
                    var tracks = tracksData;
                    for (var i = 0; i < tracks.length; ++i)
                    {
                        var track = tracks[i];
                        console.log(track);
                        var mins = Math.floor(track.Duration / 60);
                        var secs = ('0' + (track.Duration % 60)).slice(-2);
                        track.Duration = mins + ':' + secs;
                        $tracks.append($('#playlistTrackTemplate').tmpl(track));
                    }
                }
            });
            audioManager.bindPlayBtnListeners();
            $(this).toggleClass("active");
        }

    </script>
    }